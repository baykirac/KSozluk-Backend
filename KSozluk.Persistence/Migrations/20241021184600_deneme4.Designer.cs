// <auto-generated />
using System;
using KSozluk.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KSozluk.Persistence.Migrations
{
    [DbContext(typeof(SozlukContext))]
    [Migration("20241021184600_deneme4")]
    partial class deneme4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KSozluk.Domain.Description", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AcceptorId")
                        .HasColumnType("uuid");

                    b.Property<string>("DescriptionContent")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("character varying(550)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastediteddate");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("PreviousDescriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("previusdescid");

                    b.Property<Guid?>("RecommenderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("WordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AcceptorId");

                    b.HasIndex("PreviousDescriptionId");

                    b.HasIndex("RecommenderId");

                    b.HasIndex("WordId");

                    b.ToTable("descriptions", (string)null);
                });

            modelBuilder.Entity("KSozluk.Domain.DescriptionLike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DescriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("description_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("description_like", (string)null);
                });

            modelBuilder.Entity("KSozluk.Domain.FavouriteWord", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WordId")
                        .HasColumnType("uuid")
                        .HasColumnName("word_id");

                    b.HasKey("Id");

                    b.ToTable("favourite_word", (string)null);
                });

            modelBuilder.Entity("KSozluk.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email")
                        .HasAnnotation("RegularExpression", "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fullname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("password")
                        .HasAnnotation("RegularExpression", "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).*$");

                    b.Property<short>("Permissions")
                        .HasColumnType("smallint")
                        .HasColumnName("permissions");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("refreshtoken");

                    b.Property<DateTime?>("TokenExpireDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("tokenexpiredate");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("KSozluk.Domain.Word", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AcceptorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastediteddate");

                    b.Property<Guid?>("RecommenderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("WordContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("word");

                    b.HasKey("Id");

                    b.HasIndex("AcceptorId");

                    b.HasIndex("RecommenderId");

                    b.ToTable("words", (string)null);
                });

            modelBuilder.Entity("KSozluk.Domain.WordLike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WordId")
                        .HasColumnType("uuid")
                        .HasColumnName("word_id");

                    b.HasKey("Id");

                    b.ToTable("word_like", (string)null);
                });

            modelBuilder.Entity("KSozluk.Domain.Description", b =>
                {
                    b.HasOne("KSozluk.Domain.User", "Acceptor")
                        .WithMany()
                        .HasForeignKey("AcceptorId");

                    b.HasOne("KSozluk.Domain.Description", "PreviousDescription")
                        .WithMany()
                        .HasForeignKey("PreviousDescriptionId");

                    b.HasOne("KSozluk.Domain.User", "Recommender")
                        .WithMany()
                        .HasForeignKey("RecommenderId");

                    b.HasOne("KSozluk.Domain.Word", "Word")
                        .WithMany("Descriptions")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acceptor");

                    b.Navigation("PreviousDescription");

                    b.Navigation("Recommender");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("KSozluk.Domain.Word", b =>
                {
                    b.HasOne("KSozluk.Domain.User", "Acceptor")
                        .WithMany()
                        .HasForeignKey("AcceptorId");

                    b.HasOne("KSozluk.Domain.User", "Recommender")
                        .WithMany()
                        .HasForeignKey("RecommenderId");

                    b.Navigation("Acceptor");

                    b.Navigation("Recommender");
                });

            modelBuilder.Entity("KSozluk.Domain.Word", b =>
                {
                    b.Navigation("Descriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
